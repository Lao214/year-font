diff --git a/node_modules/dom-to-image/src/dom-to-image.js b/node_modules/dom-to-image/src/dom-to-image.js
index 27201ac..48cb7d8 100644
--- a/node_modules/dom-to-image/src/dom-to-image.js
+++ b/node_modules/dom-to-image/src/dom-to-image.js
@@ -50,7 +50,7 @@
      * @param {Boolean} options.cacheBust - set to true to cache bust by appending the time to the request url
      * @return {Promise} - A promise that is fulfilled with a SVG image data URL
      * */
-    function toSvg(node, options) {
+    function toSvg (node, options) {
         options = options || {};
         copyOptions(options);
         return Promise.resolve(node)
@@ -67,7 +67,7 @@
                 );
             });
   
-        function applyOptions(clone) {
+        function applyOptions (clone) {
             if (options.bgcolor) clone.style.backgroundColor = options.bgcolor;
   
             if (options.width) clone.style.width = options.width + 'px';
@@ -87,7 +87,7 @@
      * @param {Object} options - Rendering options, @see {@link toSvg}
      * @return {Promise} - A promise that is fulfilled with a Uint8Array containing RGBA pixel data.
      * */
-    function toPixelData(node, options) {
+    function toPixelData (node, options) {
         return draw(node, options || {})
             .then(function (canvas) {
                 return canvas.getContext('2d').getImageData(
@@ -104,7 +104,7 @@
      * @param {Object} options - Rendering options, @see {@link toSvg}
      * @return {Promise} - A promise that is fulfilled with a PNG image data URL
      * */
-    function toPng(node, options) {
+    function toPng (node, options) {
         return draw(node, options || {})
             .then(function (canvas) {
                 return canvas.toDataURL();
@@ -116,7 +116,7 @@
      * @param {Object} options - Rendering options, @see {@link toSvg}
      * @return {Promise} - A promise that is fulfilled with a JPEG image data URL
      * */
-    function toJpeg(node, options) {
+    function toJpeg (node, options) {
         options = options || {};
         return draw(node, options)
             .then(function (canvas) {
@@ -129,27 +129,27 @@
      * @param {Object} options - Rendering options, @see {@link toSvg}
      * @return {Promise} - A promise that is fulfilled with a PNG image blob
      * */
-    function toBlob(node, options) {
+    function toBlob (node, options) {
         return draw(node, options || {})
             .then(util.canvasToBlob);
     }
   
-    function copyOptions(options) {
+    function copyOptions (options) {
         // Copy options to impl options for use in impl
-        if(typeof(options.imagePlaceholder) === 'undefined') {
+        if (typeof (options.imagePlaceholder) === 'undefined') {
             domtoimage.impl.options.imagePlaceholder = defaultOptions.imagePlaceholder;
         } else {
             domtoimage.impl.options.imagePlaceholder = options.imagePlaceholder;
         }
   
-        if(typeof(options.cacheBust) === 'undefined') {
+        if (typeof (options.cacheBust) === 'undefined') {
             domtoimage.impl.options.cacheBust = defaultOptions.cacheBust;
         } else {
             domtoimage.impl.options.cacheBust = options.cacheBust;
         }
     }
   
-    function draw(domNode, options) {
+    function draw (domNode, options) {
         return toSvg(domNode, options)
             .then(util.makeImage)
             .then(util.delay(100))
@@ -159,13 +159,18 @@
                 return canvas;
             });
   
-        function newCanvas(domNode) {
+        function newCanvas (domNode) {
             var canvas = document.createElement('canvas');
-            canvas.width = options.width || util.width(domNode);
-            canvas.height = options.height || util.height(domNode);
-
+            var ctx = canvas.getContext('2d');
+            ctx.mozImageSmoothingEnabled = false;
+            ctx.webkitImageSmoothingEnabled = false;
+            ctx.msImageSmoothingEnabled = false;
+            ctx.imageSmoothingEnabled = false;
+            var scale = options.scale || 3; // 默认值1
+            canvas.width = (options.width * scale) || util.width(domNode);
+            canvas.height = (options.height * scale) || util.height(domNode);
+            ctx.scale(scale, scale) // 添加了scale参数
             if (options.bgcolor) {
-                var ctx = canvas.getContext('2d');
                 ctx.fillStyle = options.bgcolor;
                 ctx.fillRect(0, 0, canvas.width, canvas.height);
             }
@@ -174,7 +179,7 @@
         }
     }
   
-    function cloneNode(node, filter, root) {
+    function cloneNode (node, filter, root) {
         if (!root && filter && !filter(node)) return Promise.resolve();
   
         return Promise.resolve(node)
@@ -186,12 +191,12 @@
                 return processClone(node, clone);
             });
   
-        function makeNodeCopy(node) {
+        function makeNodeCopy (node) {
             if (node instanceof HTMLCanvasElement) return util.makeImage(node.toDataURL());
             return node.cloneNode(false);
         }
   
-        function cloneChildren(original, clone, filter) {
+        function cloneChildren (original, clone, filter) {
             var children = original.childNodes;
             if (children.length === 0) return Promise.resolve(clone);
   
@@ -200,7 +205,7 @@
                     return clone;
                 });
   
-            function cloneChildrenInOrder(parent, children, filter) {
+            function cloneChildrenInOrder (parent, children, filter) {
                 var done = Promise.resolve();
                 children.forEach(function (child) {
                     done = done
@@ -215,7 +220,7 @@
             }
         }
   
-        function processClone(original, clone) {
+        function processClone (original, clone) {
             if (!(clone instanceof Element)) return clone;
   
             return Promise.resolve()
@@ -227,14 +232,14 @@
                     return clone;
                 });
   
-            function cloneStyle() {
+            function cloneStyle () {
                 copyStyle(window.getComputedStyle(original), clone.style);
   
-                function copyStyle(source, target) {
+                function copyStyle (source, target) {
                     if (source.cssText) target.cssText = source.cssText;
                     else copyProperties(source, target);
   
-                    function copyProperties(source, target) {
+                    function copyProperties (source, target) {
                         util.asArray(source).forEach(function (name) {
                             target.setProperty(
                                 name,
@@ -246,12 +251,12 @@
                 }
             }
   
-            function clonePseudoElements() {
+            function clonePseudoElements () {
                 [':before', ':after'].forEach(function (element) {
                     clonePseudoElement(element);
                 });
   
-                function clonePseudoElement(element) {
+                function clonePseudoElement (element) {
                     var style = window.getComputedStyle(original, element);
                     var content = style.getPropertyValue('content');
   
@@ -263,23 +268,23 @@
                     styleElement.appendChild(formatPseudoElementStyle(className, element, style));
                     clone.appendChild(styleElement);
   
-                    function formatPseudoElementStyle(className, element, style) {
+                    function formatPseudoElementStyle (className, element, style) {
                         var selector = '.' + className + ':' + element;
                         var cssText = style.cssText ? formatCssText(style) : formatCssProperties(style);
                         return document.createTextNode(selector + '{' + cssText + '}');
   
-                        function formatCssText(style) {
+                        function formatCssText (style) {
                             var content = style.getPropertyValue('content');
                             return style.cssText + ' content: ' + content + ';';
                         }
   
-                        function formatCssProperties(style) {
+                        function formatCssProperties (style) {
   
                             return util.asArray(style)
                                 .map(formatProperty)
                                 .join('; ') + ';';
   
-                            function formatProperty(name) {
+                            function formatProperty (name) {
                                 return name + ': ' +
                                     style.getPropertyValue(name) +
                                     (style.getPropertyPriority(name) ? ' !important' : '');
@@ -289,12 +294,12 @@
                 }
             }
   
-            function copyUserInput() {
+            function copyUserInput () {
                 if (original instanceof HTMLTextAreaElement) clone.innerHTML = original.value;
                 if (original instanceof HTMLInputElement) clone.setAttribute("value", original.value);
             }
   
-            function fixSvg() {
+            function fixSvg () {
                 if (!(clone instanceof SVGElement)) return;
                 clone.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
   
@@ -309,7 +314,7 @@
         }
     }
   
-    function embedFonts(node) {
+    function embedFonts (node) {
         return fontFaces.resolveAll()
             .then(function (cssText) {
                 var styleNode = document.createElement('style');
@@ -319,14 +324,14 @@
             });
     }
   
-    function inlineImages(node) {
+    function inlineImages (node) {
         return images.inlineAll(node)
             .then(function () {
                 return node;
             });
     }
   
-    function makeSvgDataUri(node, width, height) {
+    function makeSvgDataUri (node, width, height) {
         return Promise.resolve(node)
             .then(function (node) {
                 node.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');
@@ -345,7 +350,7 @@
             });
     }
   
-    function newUtil() {
+    function newUtil () {
         return {
             escape: escape,
             parseExtension: parseExtension,
@@ -364,7 +369,7 @@
             height: height
         };
   
-        function mimes() {
+        function mimes () {
             /*
              * Only WOFF and EOT mime types for fonts are 'real'
              * see http://www.iana.org/assignments/media-types/media-types.xhtml
@@ -386,22 +391,22 @@
             };
         }
   
-        function parseExtension(url) {
+        function parseExtension (url) {
             var match = /\.([^\.\/]*?)$/g.exec(url);
             if (match) return match[1];
             else return '';
         }
   
-        function mimeType(url) {
+        function mimeType (url) {
             var extension = parseExtension(url).toLowerCase();
             return mimes()[extension] || '';
         }
   
-        function isDataUrl(url) {
+        function isDataUrl (url) {
             return url.search(/^(data:)/) !== -1;
         }
   
-        function toBlob(canvas) {
+        function toBlob (canvas) {
             return new Promise(function (resolve) {
                 var binaryString = window.atob(canvas.toDataURL().split(',')[1]);
                 var length = binaryString.length;
@@ -416,7 +421,7 @@
             });
         }
   
-        function canvasToBlob(canvas) {
+        function canvasToBlob (canvas) {
             if (canvas.toBlob)
                 return new Promise(function (resolve) {
                     canvas.toBlob(resolve);
@@ -425,7 +430,7 @@
             return toBlob(canvas);
         }
   
-        function resolveUrl(url, baseUrl) {
+        function resolveUrl (url, baseUrl) {
             var doc = document.implementation.createHTMLDocument();
             var base = doc.createElement('base');
             doc.head.appendChild(base);
@@ -436,20 +441,20 @@
             return a.href;
         }
   
-        function uid() {
+        function uid () {
             var index = 0;
   
             return function () {
                 return 'u' + fourRandomChars() + index++;
   
-                function fourRandomChars() {
+                function fourRandomChars () {
                     /* see http://stackoverflow.com/a/6248722/2519373 */
                     return ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);
                 }
             };
         }
   
-        function makeImage(uri) {
+        function makeImage (uri) {
             return new Promise(function (resolve, reject) {
                 var image = new Image();
                 image.onload = function () {
@@ -460,9 +465,9 @@
             });
         }
   
-        function getAndEncode(url) {
+        function getAndEncode (url) {
             var TIMEOUT = 30000;
-            if(domtoimage.impl.options.cacheBust) {
+            if (domtoimage.impl.options.cacheBust) {
                 // Cache bypass so we dont have CORS issues with cached images
                 // Source: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache
                 url += ((/\?/).test(url) ? "&" : "?") + (new Date()).getTime();
@@ -479,18 +484,18 @@
                 request.send();
   
                 var placeholder;
-                if(domtoimage.impl.options.imagePlaceholder) {
+                if (domtoimage.impl.options.imagePlaceholder) {
                     var split = domtoimage.impl.options.imagePlaceholder.split(/,/);
-                    if(split && split[1]) {
+                    if (split && split[1]) {
                         placeholder = split[1];
                     }
                 }
   
-                function done() {
+                function done () {
                     if (request.readyState !== 4) return;
   
                     if (request.status !== 200) {
-                        if(placeholder) {
+                        if (placeholder) {
                             resolve(placeholder);
                         } else {
                             fail('cannot fetch resource: ' + url + ', status: ' + request.status);
@@ -507,30 +512,30 @@
                     encoder.readAsDataURL(request.response);
                 }
   
-                function timeout() {
-                    if(placeholder) {
+                function timeout () {
+                    if (placeholder) {
                         resolve(placeholder);
                     } else {
                         fail('timeout of ' + TIMEOUT + 'ms occured while fetching resource: ' + url);
                     }
                 }
   
-                function fail(message) {
+                function fail (message) {
                     console.error(message);
                     resolve('');
                 }
             });
         }
   
-        function dataAsUrl(content, type) {
+        function dataAsUrl (content, type) {
             return 'data:' + type + ';base64,' + content;
         }
   
-        function escape(string) {
+        function escape (string) {
             return string.replace(/([.*+?^${}()|\[\]\/\\])/g, '\\$1');
         }
   
-        function delay(ms) {
+        function delay (ms) {
             return function (arg) {
                 return new Promise(function (resolve) {
                     setTimeout(function () {
@@ -540,36 +545,36 @@
             };
         }
   
-        function asArray(arrayLike) {
+        function asArray (arrayLike) {
             var array = [];
             var length = arrayLike.length;
             for (var i = 0; i < length; i++) array.push(arrayLike[i]);
             return array;
         }
   
-        function escapeXhtml(string) {
+        function escapeXhtml (string) {
             return string.replace(/#/g, '%23').replace(/\n/g, '%0A');
         }
   
-        function width(node) {
+        function width (node) {
             var leftBorder = px(node, 'border-left-width');
             var rightBorder = px(node, 'border-right-width');
             return node.scrollWidth + leftBorder + rightBorder;
         }
   
-        function height(node) {
+        function height (node) {
             var topBorder = px(node, 'border-top-width');
             var bottomBorder = px(node, 'border-bottom-width');
             return node.scrollHeight + topBorder + bottomBorder;
         }
   
-        function px(node, styleProperty) {
+        function px (node, styleProperty) {
             var value = window.getComputedStyle(node).getPropertyValue(styleProperty);
             return parseFloat(value.replace('px', ''));
         }
     }
   
-    function newInliner() {
+    function newInliner () {
         var URL_REGEX = /url\(['"]?([^'"]+?)['"]?\)/g;
   
         return {
@@ -581,11 +586,11 @@
             }
         };
   
-        function shouldProcess(string) {
+        function shouldProcess (string) {
             return string.search(URL_REGEX) !== -1;
         }
   
-        function readUrls(string) {
+        function readUrls (string) {
             var result = [];
             var match;
             while ((match = URL_REGEX.exec(string)) !== null) {
@@ -596,7 +601,7 @@
             });
         }
   
-        function inline(string, url, baseUrl, get) {
+        function inline (string, url, baseUrl, get) {
             return Promise.resolve(url)
                 .then(function (url) {
                     return baseUrl ? util.resolveUrl(url, baseUrl) : url;
@@ -609,12 +614,12 @@
                     return string.replace(urlAsRegex(url), '$1' + dataUrl + '$3');
                 });
   
-            function urlAsRegex(url) {
+            function urlAsRegex (url) {
                 return new RegExp('(url\\([\'"]?)(' + util.escape(url) + ')([\'"]?\\))', 'g');
             }
         }
   
-        function inlineAll(string, baseUrl, get) {
+        function inlineAll (string, baseUrl, get) {
             if (nothingToInline()) return Promise.resolve(string);
   
             return Promise.resolve(string)
@@ -629,13 +634,13 @@
                     return done;
                 });
   
-            function nothingToInline() {
+            function nothingToInline () {
                 return !shouldProcess(string);
             }
         }
     }
   
-    function newFontFaces() {
+    function newFontFaces () {
         return {
             resolveAll: resolveAll,
             impl: {
@@ -643,7 +648,7 @@
             }
         };
   
-        function resolveAll() {
+        function resolveAll () {
             return readAll(document)
                 .then(function (webFonts) {
                     return Promise.all(
@@ -657,7 +662,7 @@
                 });
         }
   
-        function readAll() {
+        function readAll () {
             return Promise.resolve(util.asArray(document.styleSheets))
                 .then(getCssRules)
                 .then(selectWebFontRules)
@@ -665,7 +670,7 @@
                     return rules.map(newWebFont);
                 });
   
-            function selectWebFontRules(cssRules) {
+            function selectWebFontRules (cssRules) {
                 return cssRules
                     .filter(function (rule) {
                         return rule.type === CSSRule.FONT_FACE_RULE;
@@ -675,7 +680,7 @@
                     });
             }
   
-            function getCssRules(styleSheets) {
+            function getCssRules (styleSheets) {
                 var cssRules = [];
                 styleSheets.forEach(function (sheet) {
                     try {
@@ -687,9 +692,9 @@
                 return cssRules;
             }
   
-            function newWebFont(webFontRule) {
+            function newWebFont (webFontRule) {
                 return {
-                    resolve: function resolve() {
+                    resolve: function resolve () {
                         var baseUrl = (webFontRule.parentStyleSheet || {}).href;
                         return inliner.inlineAll(webFontRule.cssText, baseUrl);
                     },
@@ -701,7 +706,7 @@
         }
     }
   
-    function newImages() {
+    function newImages () {
         return {
             inlineAll: inlineAll,
             impl: {
@@ -709,12 +714,12 @@
             }
         };
   
-        function newImage(element) {
+        function newImage (element) {
             return {
                 inline: inline
             };
   
-            function inline(get) {
+            function inline (get) {
                 if (util.isDataUrl(element.src)) return Promise.resolve();
   
                 return Promise.resolve(element.src)
@@ -732,7 +737,7 @@
             }
         }
   
-        function inlineAll(node) {
+        function inlineAll (node) {
             if (!(node instanceof Element)) return Promise.resolve(node);
   
             return inlineBackground(node)
@@ -747,7 +752,7 @@
                         );
                 });
   
-            function inlineBackground(node) {
+            function inlineBackground (node) {
                 var background = node.style.getPropertyValue('background');
   
                 if (!background) return Promise.resolve(node);
@@ -766,4 +771,5 @@
             }
         }
     }
-})(this);
+  })(this);
+  
\ No newline at end of file
